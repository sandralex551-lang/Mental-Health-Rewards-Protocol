(define-constant ERR-NOT-AUTHORIZED u100)
(define-constant ERR-INVALID-AMOUNT u101)
(define-constant ERR-INVALID-USER u102)
(define-constant ERR-INVALID-STREAK u103)
(define-constant ERR-COOLDOWN-ACTIVE u104)
(define-constant ERR-INVALID-TIMESTAMP u105)
(define-constant ERR-AUTHORITY-NOT-VERIFIED u106)
(define-constant ERR-INVALID-REWARD-RATE u107)
(define-constant ERR-INVALID-COOLDOWN u108)
(define-constant ERR-INVALID-STREAK-CONTRACT u109)
(define-constant ERR-INVALID-TOKEN-CONTRACT u110)
(define-constant ERR-REWARD-CAP-EXCEEDED u111)
(define-constant ERR-INVALID-UPDATE-PARAM u112)
(define-constant ERR-INVALID-MIN-REWARD u113)
(define-constant ERR-INVALID-MAX-REWARD u114)
(define-constant ERR-USER-NOT-REGISTERED u115)

(define-data-var streak-contract principal 'SP000000000000000000002Q6VF78)
(define-data-var token-contract principal 'SP000000000000000000002Q6VF78)
(define-data-var authority-contract (optional principal) none)
(define-data-var reward-rate uint u100)
(define-data-var cooldown-period uint u144)
(define-data-var min-reward uint u10)
(define-data-var max-reward uint u10000)
(define-data-var reward-cap uint u50000)
(define-map claim-records { user: principal, activity-type: (string-utf8 50) } { amount: uint, timestamp: uint })
(define-map last-claim { user: principal, activity-type: (string-utf8 50) } uint)

(define-read-only (get-claim-record (user principal) (activity-type (string-utf8 50)))
  (ok (default-to { amount: u0, timestamp: u0 } (map-get? claim-records { user: user, activity-type: activity-type })))
)

(define-read-only (get-last-claim (user principal) (activity-type (string-utf8 50)))
  (ok (default-to u0 (map-get? last-claim { user: user, activity-type: activity-type })))
)

(define-read-only (get-reward-rate)
  (ok (var-get reward-rate))
)

(define-read-only (get-cooldown-period)
  (ok (var-get cooldown-period))
)

(define-private (validate-user (user principal))
  (if (is-eq user tx-sender)
      (ok true)
      (err ERR-INVALID-USER))
)

(define-private (validate-amount (amount uint))
  (if (and (>= amount (var-get min-reward)) (<= amount (var-get max-reward)))
      (ok true)
      (err ERR-INVALID-AMOUNT))
)

(define-private (validate-timestamp (ts uint))
  (if (>= ts block-height)
      (ok true)
      (err ERR-INVALID-TIMESTAMP))
)

(define-private (validate-streak (streak (optional { current-length: uint, multiplier: uint, status: bool })))
  (match streak
    s (if (get status s)
          (ok (get current-length s))
          (err ERR-INVALID-STREAK))
    (err ERR-INVALID-STREAK))
)

(define-private (validate-cooldown (user principal) (activity-type (string-utf8 50)))
  (let ((last-claim-time (default-to u0 (map-get? last-claim { user: user, activity-type: activity-type }))))
    (if (>= block-height (+ last-claim-time (var-get cooldown-period)))
        (ok true)
        (err ERR-COOLDOWN-ACTIVE))
  )
)

(define-public (set-authority-contract (contract-principal principal))
  (begin
    (asserts! (is-none (var-get authority-contract)) (err ERR-AUTHORITY-NOT-VERIFIED))
    (var-set authority-contract (some contract-principal))
    (ok true)
  )
)

(define-public (set-streak-contract (contract-principal principal))
  (begin
    (asserts! (is-some (var-get authority-contract)) (err ERR-AUTHORITY-NOT-VERIFIED))
    (var-set streak-contract contract-principal)
    (ok true)
  )
)

(define-public (set-token-contract (contract-principal principal))
  (begin
    (asserts! (is-some (var-get authority-contract)) (err ERR-AUTHORITY-NOT-VERIFIED))
    (var-set token-contract contract-principal)
    (ok true)
  )
)

(define-public (set-reward-rate (new-rate uint))
  (begin
    (asserts! (> new-rate u0) (err ERR-INVALID-REWARD-RATE))
    (asserts! (is-some (var-get authority-contract)) (err ERR-AUTHORITY-NOT-VERIFIED))
    (var-set reward-rate new-rate)
    (ok true)
  )
)

(define-public (set-cooldown-period (new-period uint))
  (begin
    (asserts! (> new-period u0) (err ERR-INVALID-COOLDOWN))
    (asserts! (is-some (var-get authority-contract)) (err ERR-AUTHORITY-NOT-VERIFIED))
    (var-set cooldown-period new-period)
    (ok true)
  )
)

(define-public (set-reward-cap (new-cap uint))
  (begin
    (asserts! (> new-cap u0) (err ERR-INVALID-UPDATE-PARAM))
    (asserts! (is-some (var-get authority-contract)) (err ERR-AUTHORITY-NOT-VERIFIED))
    (var-set reward-cap new-cap)
    (ok true)
  )
)

(define-public (claim-reward (activity-type (string-utf8 50)))
  (let (
        (user tx-sender)
        (key { user: user, activity-type: activity-type })
        (streak (contract-call? .streak-manager get-streak user activity-type))
        (streak-length (try! (validate-streak streak)))
        (multiplier (get multiplier (unwrap! streak (err ERR-INVALID-STREAK))))
        (reward-amount (* streak-length multiplier (var-get reward-rate)))
      )
    (try! (validate-user user))
    (try! (validate-amount reward-amount))
    (try! (validate-cooldown user activity-type))
    (asserts! (<= reward-amount (var-get reward-cap)) (err ERR-REWARD-CAP-EXCEEDED))
    (try! (contract-call? .mental-health-token mint reward-amount user))
    (map-set claim-records key { amount: reward-amount, timestamp: block-height })
    (map-set last-claim key block-height)
    (print { event: "reward-claimed", user: user, activity-type: activity-type, amount: reward-amount })
    (ok reward-amount)
  )
)