(define-constant ERR-NOT-AUTHORIZED u100)
(define-constant ERR-INVALID-AMOUNT u101)
(define-constant ERR-INSUFFICIENT-BALANCE u102)
(define-constant ERR-INVALID-RECEIVER u103)
(define-constant ERR-INVALID-MINTER u104)
(define-constant ERR-INVALID-BURNER u105)
(define-constant ERR-AUTHORITY-NOT-VERIFIED u106)
(define-constant ERR-INVALID-MINT-CAP u107)
(define-constant ERR-INVALID-BURN-CAP u108)
(define-constant ERR-TRANSFER-DISABLED u109)
(define-constant ERR-INVALID-TIMESTAMP u110)
(define-constant ERR-MAX-SUPPLY-EXCEEDED u111)
(define-constant ERR-INVALID-METADATA u112)
(define-constant ERR-INVALID-UPDATE-PARAM u113)
(define-constant ERR-MINTER-ALREADY-SET u114)
(define-constant ERR-NO-MINTERS u115)

(define-fungible-token mht u1000000000)
(define-data-var total-supply uint u0)
(define-data-var mint-cap uint u1000000)
(define-data-var burn-cap uint u500000)
(define-data-var transfer-enabled bool true)
(define-data-var authority-contract (optional principal) none)
(define-data-var token-uri (string-utf8 256) u"https://x.ai/mht")
(define-map minters principal bool)
(define-map balances principal uint)
(define-map allowances { owner: principal, spender: principal } uint)
(define-map mint-records { minter: principal, timestamp: uint } uint)
(define-map burn-records { burner: principal, timestamp: uint } uint)

(define-read-only (get-balance (account principal))
  (ok (ft-get-balance mht account))
)

(define-read-only (get-total-supply)
  (ok (var-get total-supply))
)

(define-read-only (get-name)
  (ok "MentalHealthToken")
)

(define-read-only (get-symbol)
  (ok "MHT")
)

(define-read-only (get-decimals)
  (ok u6)
)

(define-read-only (get-token-uri)
  (ok (some (var-get token-uri)))
)

(define-read-only (get-allowance (owner principal) (spender principal))
  (ok (default-to u0 (map-get? allowances { owner: owner, spender: spender })))
)

(define-read-only (get-mint-record (minter principal) (timestamp uint))
  (ok (default-to u0 (map-get? mint-records { minter: minter, timestamp: timestamp })))
)

(define-read-only (get-burn-record (burner principal) (timestamp uint))
  (ok (default-to u0 (map-get? burn-records { burner: burner, timestamp: timestamp })))
)

(define-private (validate-amount (amount uint))
  (if (> amount u0)
      (ok true)
      (err ERR-INVALID-AMOUNT))
)

(define-private (validate-receiver (receiver principal))
  (if (not (is-eq receiver tx-sender))
      (ok true)
      (err ERR-INVALID-RECEIVER))
)

(define-private (validate-timestamp (ts uint))
  (if (>= ts block-height)
      (ok true)
      (err ERR-INVALID-TIMESTAMP))
)

(define-public (set-authority-contract (contract-principal principal))
  (begin
    (asserts! (is-none (var-get authority-contract)) (err ERR-AUTHORITY-NOT-VERIFIED))
    (var-set authority-contract (some contract-principal))
    (ok true)
  )
)

(define-public (set-minter (minter principal) (enabled bool))
  (begin
    (asserts! (is-some (var-get authority-contract)) (err ERR-AUTHORITY-NOT-VERIFIED))
    (asserts! (not (is-eq minter tx-sender)) (err ERR-NOT-AUTHORIZED))
    (map-set minters minter enabled)
    (ok true)
  )
)

(define-public (set-mint-cap (new-cap uint))
  (begin
    (asserts! (> new-cap u0) (err ERR-INVALID-MINT-CAP))
    (asserts! (is-some (var-get authority-contract)) (err ERR-AUTHORITY-NOT-VERIFIED))
    (var-set mint-cap new-cap)
    (ok true)
  )
)

(define-public (set-burn-cap (new-cap uint))
  (begin
    (asserts! (> new-cap u0) (err ERR-INVALID-BURN-CAP))
    (asserts! (is-some (var-get authority-contract)) (err ERR-AUTHORITY-NOT-VERIFIED))
    (var-set burn-cap new-cap)
    (ok true)
  )
)

(define-public (set-transfer-enabled (enabled bool))
  (begin
    (asserts! (is-some (var-get authority-contract)) (err ERR-AUTHORITY-NOT-VERIFIED))
    (var-set transfer-enabled enabled)
    (ok true)
  )
)

(define-public (set-token-uri (new-uri (string-utf8 256)))
  (begin
    (asserts! (> (len new-uri) u0) (err ERR-INVALID-METADATA))
    (asserts! (is-some (var-get authority-contract)) (err ERR-AUTHORITY-NOT-VERIFIED))
    (var-set token-uri new-uri)
    (ok true)
  )
)

(define-public (transfer (amount uint) (sender principal) (receiver principal) (memo (optional (buff 34))))
  (begin
    (asserts! (var-get transfer-enabled) (err ERR-TRANSFER-DISABLED))
    (asserts! (is-eq tx-sender sender) (err ERR-NOT-AUTHORIZED))
    (try! (validate-amount amount))
    (try! (validate-receiver receiver))
    (asserts! (>= (ft-get-balance mht sender) amount) (err ERR-INSUFFICIENT-BALANCE))
    (try! (ft-transfer? mht amount sender receiver))
    (print { event: "transfer", amount: amount, sender: sender, receiver: receiver, memo: memo })
    (ok true)
  )
)

(define-public (approve (spender principal) (amount uint))
  (begin
    (try! (validate-amount amount))
    (try! (validate-receiver spender))
    (map-set allowances { owner: tx-sender, spender: spender } amount)
    (print { event: "approval", owner: tx-sender, spender: spender, amount: amount })
    (ok true)
  )
)

(define-public (transfer-from (owner principal) (receiver principal) (amount uint))
  (begin
    (asserts! (var-get transfer-enabled) (err ERR-TRANSFER-DISABLED))
    (try! (validate-amount amount))
    (try! (validate-receiver receiver))
    (asserts! (>= (default-to u0 (map-get? allowances { owner: owner, spender: tx-sender })) amount) (err ERR-NOT-AUTHORIZED))
    (asserts! (>= (ft-get-balance mht owner) amount) (err ERR-INSUFFICIENT-BALANCE))
    (map-set allowances { owner: owner, spender: tx-sender } (- (default-to u0 (map-get? allowances { owner: owner, spender: tx-sender })) amount))
    (try! (ft-transfer? mht amount owner receiver))
    (print { event: "transfer-from", amount: amount, owner: owner, receiver: receiver })
    (ok true)
  )
)

(define-public (mint (amount uint) (receiver principal))
  (let (
        (current-supply (var-get total-supply))
        (new-supply (+ current-supply amount))
      )
    (asserts! (default-to false (map-get? minters tx-sender)) (err ERR-INVALID-MINTER))
    (try! (validate-amount amount))
    (try! (validate-receiver receiver))
    (asserts! (<= amount (var-get mint-cap)) (err ERR-INVALID-MINT-CAP))
    (asserts! (<= new-supply (ft-get-supply mht)) (err ERR-MAX-SUPPLY-EXCEEDED))
    (try! (ft-mint? mht amount receiver))
    (var-set total-supply new-supply)
    (map-set mint-records { minter: tx-sender, timestamp: block-height } amount)
    (print { event: "mint", amount: amount, receiver: receiver })
    (ok true)
  )
)

(define-public (burn (amount uint) (owner principal))
  (begin
    (asserts! (is-eq tx-sender owner) (err ERR-INVALID-BURNER))
    (try! (validate-amount amount))
    (asserts! (<= amount (var-get burn-cap)) (err ERR-INVALID-BURN-CAP))
    (asserts! (>= (ft-get-balance mht owner) amount) (err ERR-INSUFFICIENT-BALANCE))
    (try! (ft-burn? mht amount owner))
    (var-set total-supply (- (var-get total-supply) amount))
    (map-set burn-records { burner: owner, timestamp: block-height } amount)
    (print { event: "burn", amount: amount, owner: owner })
    (ok true)
  )
)